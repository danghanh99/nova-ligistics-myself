openapi: 3.0.0
info:
  title: Nova Logistics
  version: '0.2'
servers:
  - url: 'https://nova-logistics-backend.herokuapp.com/api/v1'
  - url: 'http://localhost:3000/api/v1/'
tags:
  - name: Login
paths:
  /login:
    post:
      tags:
        - Login
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            example: 'admin@gmail.com'
        - name: password
          in: query
          required: true
          schema:
            type: string
            example: '123456'
      responses:
        '200':
          description: Will send `Authenticated`
          content:
            appclication/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
components:
  responses:
    RequestSuccess:
      description: Request Success
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 422
              message:
                type: string
                example: "Request Success"
            required:
              - code
              - message
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 404
              message:
                type: string
                example: "Couldn't find with 'id'="
            required:
              - code
              - message
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 401
              message:
                type: string
                example: "User authentication failed"
            required:
              - code
              - message
    Permission:
      description: You do not have permission
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 403
              message:
                type: string
                example: "You do not have permission"
            required:
              - code
              - message
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 400
              message:
                type: string
                example: "Bad Request"
            required:
              - code
              - message
    InvalidParams:
      description: Invalid Params
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 422
              message:
                type: string
                example: "Invalid Params"
            required:
              - code
              - message
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        birthdate:
          type: string
          format: date
        join_date:
          type: string
          format: date
        status:
          type: string
          enum: [ACTIVE, FORMER]
        phone_number:
          type: string
        roles:
          type: array
          items:
            type: string
        day_off_infos:
          type: array
          items:
            type: object
            properties:
              day_off_category_id:
                type: integer
                format: int64
              hours:
                type: integer
                format: int64
              category_name:
                type: string
                example: 'VACATION'
              available_hours:
                type: integer
                format: int64
          example:
                - day_off_category_id: 1
                  hours: 160
                  category_name: 'VACATION'
                  available_hours: 220
                - day_off_category_id: 2
                  hours: 160
                  category_name: 'ILLNESS'
                  available_hours: 220
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
