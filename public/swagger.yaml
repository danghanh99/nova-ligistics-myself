openapi: 3.0.0
info:
  title: Nova Logistics
  version: '0.2'
servers:
  - url: 'https://nova-logistics-backend.herokuapp.com/api/v1'
  - url: 'http://localhost:3000/api/v1/'
tags:
  - name: Login
paths:
  /login:
    post:
      tags:
        - Login
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            example: 'admin@novahub.vn'
        - name: password
          in: query
          required: true
          schema:
            type: string
            example: 'Nova@123'
      responses:
        201:
          description: Will send `Authenticated`
          content:
            appclication/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
  /customers:
    post:
      tags:
      - Customer
      summary: Create Customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestParamsCustomer'
      responses:
        201:
          description: created customer
          content:
            application/json:
              schema:
                type: object
                properties: 
                  customer:
                    $ref: '#/components/schemas/Customer'
        422:
          $ref: '#/components/responses/InvalidParams' 
    get:
      tags:
        - Customer
      summary: Get list Customers
      description: Returns list Customers
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  customers:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/Customer'
  '/customers/{id}':
    parameters:
      - name: id
        in: path
        description: ID of customer to return
        required: true
        schema:
          type: integer
          format: int64
          example: 1
    get:
      tags:
        - Customer
      summary: Find Customer by id
      description: Returns an customer
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  customer:
                    $ref: '#/components/schemas/Customer'
        404:
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
      - Customer
      summary: Update Customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestParamsCustomer'
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  customer:
                    $ref: '#/components/schemas/Customer'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/InvalidParams'
  /suppliers:
    get:
      tags:
        - Suppliers
      summary: Get all supllier
      parameters:
        - name: name
          in: query
          schema:
            type: string
            example: 'supplier'
        - name: sort
          in: query
          schema:
            type: string
            example: 'name: ASC, phone: DESC'
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  data:
                      type: array
                      items:
                        type: object
                        $ref: '#/components/schemas/Supplier'
                  meta:
                      $ref: '#/components/schemas/Pagination'
        422:
          $ref: '#/components/responses/InvalidParams'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Suppliers
      summary: Create supplier by id
      description: Returns an supplier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestParamSupplier'
      responses:
        201:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  supplier:
                    $ref: '#/components/schemas/Supplier'
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/InvalidParams'
  '/suppliers/{id}':
    get:
      tags:
        - Suppliers
      summary: Find supplier by id
      description: Returns an supplier
      operationId: getSupplierById
      parameters:
        - name: id
          in: path
          description: ID of supplier to return
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  supplier:
                    $ref: '#/components/schemas/Supplier'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - Suppliers
      summary: Update supplier by id
      description: Returns an supplier
      parameters:
        - name: id
          in: path
          description: ID of supplier to return
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestParamSupplier'
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  supplier:
                    $ref: '#/components/schemas/Supplier'
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/InvalidParams'
        404:
          $ref: '#/components/responses/NotFound'
  /products:
    post:
      tags:
      - Product
      summary: Create Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestParamsProduct'
      responses:
        201:
          description: created product
          content:
            application/json:
              schema:
                type: object
                properties: 
                  product:
                    $ref: '#/components/schemas/Product'
        422:
          $ref: '#/components/responses/InvalidParams'
        401:
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - Product
      summary: Get all Product
      parameters:
        - name: name
          in: query
          schema:
            type: string
            example: 'iphone'
        - name: sort
          in: query
          schema:
            type: string
            example: 'name: desc, created_at: asc'
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  data:
                      type: array
                      items:
                        type: object
                        $ref: '#/components/schemas/Product'
                  meta:
                      $ref: '#/components/schemas/Pagination'
        422:
          $ref: '#/components/responses/InvalidParams'
        401:
          $ref: '#/components/responses/Unauthorized'
  '/products/{id}':
    parameters:
      - name: id
        in: path
        description: ID of product to return
        required: true
        schema:
          type: integer
          format: int64
          example: 1
    get:
      tags:
        - Product
      summary: Find product by id
      description: Returns an product
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  product:
                    $ref: '#/components/schemas/Product'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags:
      - Product
      summary: Update Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestParamsProduct'
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  product:
                    $ref: '#/components/schemas/Product'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/InvalidParams'
        401:
          $ref: '#/components/responses/Unauthorized'
  '/exports/{id}':
    parameters:
      - name: id
        in: path
        description: ID of product to return
        required: true
        schema:
          type: integer
          format: int64
          example: 1
    delete:
      tags:
        - Export
      summary: Delete Export by id
      responses:
        204:
          description: successful
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
  /exports:
    post:
      tags:
      - Export
      summary: Create Export
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestParamsExport'
      responses:
        201:
          description: created export
          content:
            application/json:
              schema:
                type: object
                properties: 
                  export:
                    $ref: '#/components/schemas/Export'
        422:
          $ref: '#/components/responses/InvalidParams'
        401:
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
      - Export
      summary: Get all Export
      parameters:
        - name: supplier_id
          in: query
          schema:
            type: integer
            example: 1
        - name: product_name
          in: query
          schema:
            type: string
            example: 'viet'
        - name: from_date
          in: query
          schema:
            type: string
            format: date
            example: '2020-12-12'
        - name: to_date
          in: query
          schema:
            type: string
            format: date
            example: '2020-12-12'
        - name: sort
          in: query
          schema:
            type: string
            example: 'user_id: desc, created_at: asc'
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  data:
                      type: array
                      items:
                        type: object
                        $ref: '#/components/schemas/Export'
                  meta:
                      $ref: '#/components/schemas/Pagination'
        422:
          $ref: '#/components/responses/InvalidParams'
        401:
          $ref: '#/components/responses/Unauthorized'
  /imports:
    post:
      tags:
      - Import
      summary: Create Import
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestParamsImport'
      responses:
        201:
          description: created import
          content:
            application/json:
              schema:
                type: object
                properties: 
                  import:
                    $ref: '#/components/schemas/Import'
        422:
          $ref: '#/components/responses/InvalidParams'
        401:
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
      - Import
      summary: Get all imports
      parameters:
        - name: supplier_id
          in: query
          schema:
            type: integer
            example: 1
        - name: product_name
          in: query
          schema:
            type: string
            example: 'iphone'
        - name: from_date
          in: query
          schema:
            type: string
            format: date
            example: '2020-12-12'
        - name: to_date
          in: query
          schema:
            type: string
            format: date
            example: '2020-12-12'
        - name: sort
          in: query
          schema:
            type: string
            example: 'user_id: desc, created_at: asc'
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties: 
                  data:
                      type: array
                      items:
                        type: object
                        $ref: '#/components/schemas/Import'
                  meta:
                      $ref: '#/components/schemas/Pagination'
        422:
          $ref: '#/components/responses/InvalidParams'
        401:
          $ref: '#/components/responses/Unauthorized'
  '/imports/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          example: 1
    delete:
      tags:
        - Import
      summary: Delete Import by id
      responses:
        204:
          description: successful
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
components:
  responses:
    RequestSuccess:
      description: Request Success
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 422
              message:
                type: string
                example: "Request Success"
            required:
              - code
              - message
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 404
              message:
                type: string
                example: "Couldn't find with 'id'="
            required:
              - code
              - message
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 401
              message:
                type: string
                example: "User authentication failed"
            required:
              - code
              - message
    Permission:
      description: You do not have permission
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 403
              message:
                type: string
                example: "You do not have permission"
            required:
              - code
              - message
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 400
              message:
                type: string
                example: "Bad Request"
            required:
              - code
              - message
    InvalidParams:
      description: Invalid Params
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 422
              message:
                type: string
                example: "Invalid Params"
            required:
              - code
              - message
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        name:
          type: string
        phone:
          type: string
        address:
          type: string
    Supplier:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          example: 'string@string.com'
        name:
          type: string
          example: 'Novahub@2021'
        phone:
          type: string
          example: '0908070605'
        address:
          type: string
          example: '10B nguyen chi thanh'
        description:
          type: string
          example: 'this is description'
    RequestParamSupplier:
      type: object
      properties:
        name:
          type: string
          example: 'Novahub@2021'
        phone:
          type: string
          example: '0908070605'
        address:
          type: string
          example: '10B nguyen chi thanh'
        description:
          type: string
          example: 'this is description'
    RequestParamsCustomer:
      type: object
      properties:
        name:
          type: string
          example: "novahub"
        phone_number:
          type: integer
          example: "0905010203"
        address:
          type: string
          example: "10B Nguyen Chi Thanh"
      required:
        - name
        - phone
    Customer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "novahub"
        phone_number:
          type: string
          example: "012345678"
        address:
          type: string
          example: "10b nguyen chi thanh"
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "iphone"
        description:
          type: string
          example: ""
    RequestParamsProduct:
      type: object
      properties:
        name:
          type: string
          example: "iphone"
        description:
          type: string
          example: "this is description"
      required:
        - name
    RequestParamsExport:
      type: object
      properties:
        sell_price:
          type: integer
          example: 1000
        quantity:
          type: integer
          example: 1000
        description:
          type: string
          example: "this is description"
        exported_date:
          type: string
          example: '2021-12-12'
        user_id:
          type: integer
          example: 1
        import_id:
          type: integer
          example: 1
        inventory_id:
          type: integer
          example: 1
        customer_id:
          type: integer
          example: 1
      required:
        - sell_price
        - quantity
        - exported_date
        - user_id
        - import_id
        - inventory_id
        - customer_id
    Export:
      type: object
      properties:
        id:
          type: integer
          example: 1
        sell_price:
          type: integer
          example: 1000
        quantity:
          type: integer
          example: 1000
        description:
          type: string
          example: "this is description"
        exported_date:
          type: string
          example: '2021-12-12'
        user:
          $ref: '#/components/schemas/User'
        import:
          type: object
          properties:
            inventory_id:
              type: integer
              example: 1
            supplier_id:
              type: integer
              example: 1
            product_id:
              type: integer
              example: 1
            retail_price:
              type: integer
              example: 1_000_000
            quantity:
              type: integer
              example: 100
            imported_date:
              type: string
              format: date
              example: "02-02-2020"
        inventory:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "Novahub 2021"
            address:
              type: string
              example: "10b nguyen chi thanh"
        customer:
          $ref: '#/components/schemas/Customer'
    RequestParamsImport:
      type: object
      properties:
        inventory_id:
          type: integer
          example: 1
        supplier_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        retail_price:
          type: integer
          example: 1_000_000
        quantity:
          type: integer
          example: 100
        imported_date:
          type: string
          format: date
          example: "02-02-2020"
        user_id:
          type: integer
          example: 1
        description:
          type: string
          example: "this is description"
      required:
        - name
    Import:
      type: object
      properties:
        id:
          type: integer
          example: 1
        retail_price:
          type: integer
          example: 1_000_000
        quantity:
          type: integer
          example: 100
        description:
          type: string
          example: ""
        imported_date:
          type: string
          example: "2020-02-02"
        created_at:
          type: string
          example: "2020-02-02"
        inventory:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "Novahub 2021"
            address:
              type: string
              example: "10b nguyen chi thanh"
        supplier:
          $ref: '#/components/schemas/Supplier'
        product:
          $ref: '#/components/schemas/Product'
        user:
          $ref: '#/components/schemas/User'
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 1
        total_pages:
          type: integer
          example: 1
        total_count:
          type: integer
          example: 1
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
